import{h as r,cloneElement as t,createContext as e}from"/@npm/preact";import{useReducer as n,useMemo as o,useEffect as c,useContext as a,useRef as i}from"/@npm/preact/hooks";const UPDATE=(r,t,e)=>{if(t&&"click"===t.type){const n=t.target.closest("a[href]");if(!n||n.origin!=location.origin)return r;t.preventDefault(),e=!0,t=n.href.replace(location.origin,"")}else"string"!=typeof t&&(t=location.pathname+location.search);return!0===e?history.pushState(null,"",t):!1===e&&history.replaceState(null,"",t),t};function LocationProvider(t){const[e,a]=n(UPDATE,location.pathname+location.search),i=o(()=>{const r=new URL(e,location.origin),t=r.pathname.replace(/(.)\/$/g,"$1");return{url:e,path:t,query:Object.fromEntries(r.searchParams),route:a}},[e]);return c(()=>(addEventListener("click",a),addEventListener("popstate",a),()=>{removeEventListener("click",a),removeEventListener("popstate",a)})),r(LocationProvider.ctx.Provider,{value:i},t.children)}function Router(r){const[,e]=n(r=>r+1,0),o=useLoc(),{url:a,path:u,query:l}=o,p=i(o),s=i(),h=i(),d=i(),v=i();a!==p.current.url&&(v.current=null,s.current=p.current,d.current=h.current,p.current=o),this.componentDidCatch=r=>{r&&r.then&&(v.current=r)},c(()=>{let t=v.current;const commit=()=>{p.current.url===a&&v.current===t&&(r.onLoadEnd&&r.onLoadEnd(a),s.current=d.current=null,e(0))};t?(r.onLoadStart&&r.onLoadStart(a),t.then(commit)):commit()},[a]);const m=[].concat(...r.children);let L=m.filter(r=>r.props.path===u);return 0==L.length&&(L=m.filter(r=>r.props.default)),h.current=L.map((r,e)=>t(r,{path:u,query:l})),h.current.concat(d.current||[])}Router.Provider=LocationProvider,LocationProvider.ctx=e({});const useLoc=()=>a(LocationProvider.ctx);export{LocationProvider,Router,useLoc};